# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml
analyzer:
  errors:
    always_declare_return_types: error
    always_put_control_body_on_new_line: error
    always_put_required_named_parameters_first: error
    always_specify_types: error
    annotate_overrides: error
    avoid_annotating_with_dynamic: error
    avoid_as: error
    avoid_bool_literals_in_conditional_expressions: error
    avoid_catches_without_on_clauses: error
    avoid_catching_errors: error
    avoid_classes_with_only_static_members: error
    avoid_double_and_int_checks: error
    avoid_empty_else: error
    avoid_field_initializers_in_const_classes: error
    avoid_function_literals_in_foreach_calls: error
    avoid_init_to_null: error
    avoid_js_rounded_ints: error
    avoid_null_checks_in_equality_operators: error
    avoid_positional_boolean_parameters: error
    avoid_print: warning
    avoid_redundant_argument_values: error
    avoid_relative_lib_imports: error
    avoid_returning_null: error
    avoid_return_types_on_setters: error
    avoid_setters_without_getters: error
    avoid_single_cascade_in_expression_statements: error
    avoid_slow_async_io: error
    avoid_types_as_parameter_names: error
    await_only_futures: error
    camel_case_extensions: error
    camel_case_types: error
    cancel_subscriptions: error
    cascade_invocations: error
    close_sinks: error
    constant_identifier_names: error
    # control_flow_in_finally: error
    curly_braces_in_flow_control_structures: error
    diagnostic_describe_all_properties: error
    empty_catches: error
    empty_constructor_bodies: error
    empty_statements: error
    equal_elements_in_const_set: error
    hash_and_equals: error
    implementation_imports: error
    invalid_assignment: error
    join_return_with_assignment: error
    library_names: error
    library_prefixes: error
    literal_only_boolean_expressions: error
    missing_whitespace_between_adjacent_strings: error
    non_constant_identifier_names: error
    null_closures: error
    omit_local_variable_types: error
    one_member_abstracts: error
    only_throw_errors: error
    overridden_fields: error
    package_api_docs: error
    package_names: error
    parameter_assignments: error
    prefer_adjacent_string_concatenation: error
    prefer_const_constructors: error
    prefer_const_constructors_in_immutables: error
    prefer_const_declarations: error
    prefer_equal_for_default_values: error
    prefer_final_fields: error
    prefer_final_in_for_each: error
    prefer_final_locals: error
    prefer_final_parameters: error
    prefer_function_declarations_over_variables: error
    prefer_generic_function_type_aliases: error
    prefer_if_elements_to_conditional_expressions: error
    prefer_initializing_formals: error
    prefer_inlined_adds: error
    prefer_int_literals: error
    prefer_interpolation_to_compose_strings: error
    prefer_is_empty: error
    prefer_is_not_empty: error
    prefer_iterable_whereType: error
    prefer_null_aware_operators: error
    # prefer_relative_imports: error
    prefer_single_quotes: error
    prefer_spread_collections: error
    prefer_typing_uninitialized_variables: error
    prefer_void_to_null: error
    public_member_api_docs: error
    slash_for_doc_comments: error
    sort_child_properties_last: error
    sort_constructors_first: error
    sort_unnamed_constructors_first: error
    test_types_in_equals: error
    throw_in_finally: error
    type_annotate_public_apis: error
    type_init_formals: error
    unawaited_futures: error
    unnecessary_await_in_return: error
    unnecessary_cast: error
    unnecessary_const: error
    unnecessary_getters_setters: error
    unnecessary_lambdas: error
    unnecessary_new: error
    unnecessary_null_aware_assignments: error
    unnecessary_null_in_if_null_operators: error
    unnecessary_overrides: error
    unnecessary_parenthesis: error
    unnecessary_statements: error
    unnecessary_string_escapes: error
    unnecessary_string_interpolations: error
    unnecessary_this: error
    unrelated_type_equality_checks: error
    unnecessary_raw_strings: error
    unused_element: error
    unused_field: error
    unused_import: error
    unused_label: error
    unused_local_variable: error
    unused_shown_name: error
    use_full_hex_values_for_flutter_colors: error
    use_key_in_widget_constructors: error
    use_rethrow_when_possible: error
    use_string_buffers: error
    use_to_and_as_if_applicable: error
    valid_regexps: error
    void_checks: error

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    avoid_print: true # Uncomment to disable the `avoid_print` rule
    prefer_single_quotes: true # Uncomment to enable the `prefer_single_quotes` rule
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    avoid_relative_lib_imports: true
    # prefer_relative_imports: false
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
